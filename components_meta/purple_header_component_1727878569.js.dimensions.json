{
    "id": "purple_header_component_1727878569",
    "name": "purple-header-component",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "\n<template>\n<div class=\"container mx-auto p-4 bg-opacity-20 bg-white backdrop-filter backdrop-blur-lg rounded-lg shadow-lg\">\n<h1 class=\"text-3xl font-bold mb-4 text-center text-blue-500\">Wrap Ether (WETH)</h1>\n<div class=\"mb-4\">\n<label class=\"block text-sm font-medium text-gray-700\" for=\"amount\">Amount of ETH to wrap:</label>\n<input class=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\" id=\"amount\" min=\"0\" placeholder=\"Enter amount\" step=\"0.01\" type=\"number\" v-model=\"amount\"/>\n</div>\n<button @click=\"wrapEther\" class=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105\">\n      Wrap ETH\n    </button>\n<div class=\"mt-4 p-4 bg-opacity-30 bg-gray-100 rounded-lg shadow-inner\">\n<p class=\"text-lg font-semibold\">WETH Balance: {{ wethBalance }} WETH</p>\n<p :class=\"{'text-green-500': txStatus === 'success', 'text-red-500': txStatus === 'error'}\" class=\"text-sm mt-2\">\n        {{ txMessage }}\n      </p>\n</div>\n</div>\n</template>\n<script>\nimport { ethers } from 'ethers'\n\nexport default {\n  name: 'WrapEther',\n  data() {\n    return {\n      amount: '',\n      wethBalance: '0',\n      txStatus: '',\n      txMessage: '',\n      provider: null,\n      signer: null,\n      contract: null,\n      contractAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n      chainId: 1,\n      abi: [\n        {\n          \"name\": \"deposit\",\n          \"stateMutability\": \"payable\",\n          \"inputs\": [],\n          \"outputs\": []\n        },\n        {\n          \"name\": \"balanceOf\",\n          \"stateMutability\": \"view\",\n          \"inputs\": [\n            {\n              \"name\": \"account\",\n              \"type\": \"address\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"name\": \"balance\",\n              \"type\": \"uint256\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  methods: {\n    async connectWallet() {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' })\n          this.provider = new ethers.providers.Web3Provider(window.ethereum)\n          this.signer = this.provider.getSigner()\n          this.contract = new ethers.Contract(this.contractAddress, this.abi, this.signer)\n          await this.checkNetwork()\n          await this.updateBalance()\n        } catch (error) {\n          console.error('Failed to connect wallet:', error)\n          this.txStatus = 'error'\n          this.txMessage = 'Failed to connect wallet. Please try again.'\n        }\n      } else {\n        this.txStatus = 'error'\n        this.txMessage = 'Please install MetaMask or another Web3 wallet.'\n      }\n    },\n    async checkNetwork() {\n      const network = await this.provider.getNetwork()\n      if (network.chainId !== this.chainId) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: ethers.utils.hexValue(this.chainId) }],\n          })\n        } catch (error) {\n          console.error('Failed to switch network:', error)\n          this.txStatus = 'error'\n          this.txMessage = 'Please switch to the Ethereum mainnet in your wallet.'\n        }\n      }\n    },\n    async updateBalance() {\n      if (this.contract && this.signer) {\n        const address = await this.signer.getAddress()\n        const balance = await this.contract.balanceOf(address)\n        this.wethBalance = ethers.utils.formatEther(balance)\n      }\n    },\n    async wrapEther() {\n      if (!this.amount || parseFloat(this.amount) <= 0) {\n        this.txStatus = 'error'\n        this.txMessage = 'Please enter a valid amount.'\n        return\n      }\n\n      if (!this.contract) {\n        await this.connectWallet()\n      }\n\n      if (this.contract) {\n        try {\n          const tx = await this.contract.deposit({\n            value: ethers.utils.parseEther(this.amount)\n          })\n          this.txStatus = 'pending'\n          this.txMessage = 'Transaction pending...'\n          await tx.wait()\n          this.txStatus = 'success'\n          this.txMessage = 'ETH successfully wrapped to WETH!'\n          await this.updateBalance()\n        } catch (error) {\n          console.error('Error wrapping ETH:', error)\n          this.txStatus = 'error'\n          this.txMessage = 'Failed to wrap ETH. Please try again.'\n        }\n      }\n    }\n  },\n  mounted() {\n    this.connectWallet()\n  }\n}\n</script>\n"
    },
    "w": 6,
    "h": 23,
    "x": 0,
    "y": 0,
    "i": "0",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}